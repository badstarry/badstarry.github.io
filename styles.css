11月4日 18:48💪11月4日 18:48💪11月4日 18:48[OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4][OK_4]11月4日 18:49[加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4]11月4日 18:49[打招呼]11月4日 18:50[打招呼_4]11月4日 18:50[加油干_3][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4][加油干_4]11月4日 18:55[加油干]_411月4日 18:55[加油干_2]11月14日 22:2511月14日 22:25数据加载中99% 记下来 快速阅读：点这里3秒读完 >11月14日 22:25Github.io 记下来11月14日 22:36Badstarry.github.io 记下来11月14日 22:38Opal.wtf 记下来11月14日 22:38Styles.wtf 记下来昨天 22:3311月15日 22:33数据加载中99% 记下来 快速阅读：点这里3秒读完 >今天 10:0810:08好的，我们可以在博客页面中添加.txt6.4 KB点此预览编辑下载添加到 记下来40分钟前15:31正在加载中，请稍等… 记下来15:31body {
    font-family: 'DouyinSansBold', sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background: url('/images/background.jpg') no-repeat center center fixed;
    background-size: cover;
    background-attachment: fixed;
    color: #333;
}

.container {
    width: 80%;
    max-width: 800px;
    margin: auto;
    overflow: hidden;
    background: rgba(255, 255, 255, 0.8);
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

header {
    background: rgba(255, 255, 255, 0.8);
    color: #333;
    padding: 20px 0;
    text-align: center;
    border-bottom: 3px solid #e8491d;
    margin-bottom: 20px;
}

header h1 {
    font-size: 2.5em;
    margin: 0;
}

nav {
    text-align: center;
    margin-top: 10px;
}

nav a {
    color: #333;
    text-decoration: none;
    font-size: 1.5em;
    margin: 0 15px;
}

.content {
    padding: 20px;
}

.post {
    margin-bottom: 20px;
}

.post h2 {
    font-size: 2em;
    margin-bottom: 10px;
}

.post p {
    font-size: 1.2em;
    line-height: 1.8;
}

.post a {
    color: #e8491d;
    text-decoration: none;
}

.post a:hover {
    text-decoration: underline;
}

.favorites {
    margin-top: 20px;
    border-top: 1px solid #ccc;
    padding-top: 20px;
}

.favorites h2 {
    font-size: 1.8em;
    margin-bottom: 10px;
}

.favorites .post {
    margin-bottom: 15px;
}

.contact {
    margin-top: 20px;
    border-top: 1px solid #ccc;
    padding-top: 20px;
}

.contact h2 {
    font-size: 1.8em;
    margin-bottom: 10px;
}

.contact a {
    color: #333;
    text-decoration: none;
    font-size: 1.2em;
    margin-right: 15px;
}

.contact a:hover {
    text-decoration: underline;
}

.videos {
    margin-top: 20px;
    border-top: 1px solid #ccc;
    padding-top: 20px;
}

.videos h2 {
    font-size: 1.8em;
    margin-bottom: 10px;
}

.video {
    margin-bottom: 15px;
}

.video a {
    display: block;
    color: #333;
    text-decoration: none;
    font-size: 1.2em;
    padding: 10px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 5px;
    transition: background 0.3s;
}

.video a:hover {
    background: rgba(255, 255, 255, 1);
}

footer {
    text-align: center;
    padding: 10px;
    background: rgba(255, 255, 255, 0.8);
    color: #333;
    margin-top: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}
 记下来15:33你提供的代码示例展示了如何使用 marked 库及其自定义选项来解析 Markdown 文本。由于你提到使用 require，这通常适用于 Node.js 环境。然而，在浏览器环境中，我们需要确保 marked 库已经通过 CDN 加载，并且可以直接在全局作用域中使用。1. 使用 marked 库的 UMD 版本我们将继续使用 unpkg 提供的 marked 库的 UMD 版本，并确保在浏览器环境中正确使用它。2. 更新 index.html确保 marked 库通过 CDN 加载，并且 script.js 在页面加载完成后执行。index.html<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>我的博客</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://chinese-fonts-cdn.deno.dev/packages/dymh/dist/DouyinSansBold/result.css">
    <script src="https://unpkg.com/marked@4.0.13/lib/marked.umd.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/default.min.css">
</head>
<body>
    <header>
        <div class="container">
            <h1>我的博客</h1>
            <nav>
                <a href="#/" onclick="showPosts()">首页</a>
                <a href="#/articles" onclick="showPosts()">文章</a>
                <a href="#/favorites" onclick="showFavorites()">收藏夹</a>
                <a href="#/contact" onclick="showContact()">联系我</a>
                <a href="#/videos" onclick="showVideos()">喜欢的视频</a>
            </nav>
        </div>
    </header>

    <div class="container">
        <div class="content" id="content">
            <section class="posts">
                <div class="post">
                    <h2><a href="#/article1" onclick="loadArticle('article1')">第一篇博客文章</a></h2>
                    <p>这是我的第一篇博客文章。在这里，我会分享一些有趣的内容和想法。</p>
                </div>
                <div class="post">
                    <h2><a href="#/article2" onclick="loadArticle('article2')">第二篇博客文章</a></h2>
                    <p>这是我的第二篇博客文章。在这篇文章中，我将继续分享更多的内容和见解。</p>
                </div>
                <div class="post">
                    <h2><a href="#/article3" onclick="loadArticle('article3')">第三篇博客文章</a></h2>
                    <p>这是我的第三篇博客文章。每一篇文章都是我对某个主题的深入思考和总结。</p>
                </div>
            </section>
        </div>
    </div>

    <footer>
        <p>版权所有 &copy; 2024 我的博客</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>
markup3. 更新 script.js在 script.js 中，配置 marked 库的自定义选项，并确保文章内容能够正确加载和渲染。script.js// 自定义选项
const options = {
  gfm: true, // 启用 GitHub Flavored Markdown
  pedantic: false, // 符合更严格的 Markdown 规范
  sanitize: true, // 清理输出的 HTML（防止 XSS 攻击）
  highlight: function(code, lang) {
    // 在这里可以添加代码高亮逻辑
    const validLanguage = hljs.getLanguage(lang) ? lang : 'plaintext';
    return hljs.highlight(validLanguage, code).value;
  }
};

// 读取文章内容
function loadArticle(articleName) {
    fetch(`articles/${articleName}.md`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(content => {
            // 提取文章标题
            const titleMatch = content.match(/^# (.+)/);
            const title = titleMatch ? titleMatch[1] : "未命名文章";

            // 将 Markdown 转换为 HTML
            const htmlContent = marked.parse(content, options);

            // 渲染文章内容
            document.getElementById('content').innerHTML = `
                <article>
                    <h1>${title}</h1>
                    <div class="article-content">
                        ${htmlContent}
                    </div>
                </article>
            `;

            // 初始化代码高亮
            document.querySelectorAll('pre code').forEach((block) => {
                hljs.highlightBlock(block);
            });
        })
        .catch(error => {
            console.error(`无法加载文章 ${articleName}:`, error);
            document.getElementById('content').innerHTML = `<p>无法加载文章 ${articleName}。</p>`;
        });
}

// 显示文章列表
function showPosts() {
    document.getElementById('content').innerHTML = `
        <section class="posts">
            <div class="post">
                <h2><a href="#/article1" onclick="loadArticle('article1')">第一篇博客文章</a></h2>
                <p>这是我的第一篇博客文章。在这里，我会分享一些有趣的内容和想法。</p>
            </div>
            <div class="post">
                <h2><a href="#/article2" onclick="loadArticle('article2')">第二篇博客文章</a></h2>
                <p>这是我的第二篇博客文章。在这篇文章中，我将继续分享更多的内容和见解。</p>
            </div>
            <div class="post">
                <h2><a href="#/article3" onclick="loadArticle('article3')">第三篇博客文章</a></h2>
                <p>这是我的第三篇博客文章。每一篇文章都是我对某个主题的深入思考和总结。</p>
            </div>
        </section>
    `;
}

// 显示收藏夹
function showFavorites() {
    document.getElementById('content').innerHTML = `
        <section class="favorites">
            <h2>我的收藏夹</h2>
            <div class="post">
                <h2><a href="#/favorite1">最喜欢的博客文章 1</a></h2>
                <p>这是我非常喜欢的一篇文章，内容非常丰富，值得一读。</p>
            </div>
            <div class="post">
                <h2><a href="#/favorite2">最喜欢的博客文章 2</a></h2>
                <p>这篇文章探讨了一个非常有趣的话题，提供了很多有价值的见解。</p>
            </div>
            <div class="post">
                <h2><a href="#/favorite3">最喜欢的博客文章 3</a></h2>
                <p>这篇文章对我影响很大，改变了我对某些问题的看法。</p>
            </div>
        </section>
    `;
}

// 显示联系方式
function showContact() {
    document.getElementById('content').innerHTML = `
        <section class="contact">
            <h2>联系我</h2>
            <a href="mailto:your-email@example.com">发邮件</a>
            <a href="https://twitter.com/your-twitter-handle">Twitter</a>
            <a href="https://github.com/your-github-username">GitHub</a>
        </section>
    `;
}

// 显示喜欢的视频
function showVideos() {
    document.getElementById('content').innerHTML = `
        <section class="videos">
            <h2>我喜欢的视频</h2>
            <div class="video">
                <a href="https://m.bilibili.com/video/BV1Re2wYHEPh?vd_source=181af9ae4f258abb2732cf48ed091135" target="_blank">ネバーランド feat. 初音ミク</a>
            </div>
            <div class="video">
                <a href="https://www.bilibili.com/video/BV234567890" target="_blank">视频 2 的描述</a>
            </div>
            <div class="video">
                <a href="https://www.bilibili.com/video/BV345678901" target="_blank">视频 3 的描述</a>
            </div>
        </section>
    `;
}

// 默认显示文章列表
window.onload = showPosts;
javascript4. 确保 articles 目录中的文件存在确保 articles 目录中有 article1.md、article2.md 和 article3.md 文件，并且内容格式正确。例如：articles/article1.md# 第一篇博客文章

这是我的第一篇博客文章。在这里，我会分享一些有趣的内容和想法。

\`\`\`javascript
console.log('Hello, world!');
\`\`\`
markdownarticles/article2.md# 第二篇博客文章

这是我的第二篇博客文章。在这篇文章中，我将继续分享更多的内容和见解。

\`\`\`python
def hello_world():
    print("Hello, world!")
\`\`\`
markdownarticles/article3.md# 第三篇博客文章

这是我的第三篇博客文章。每一篇文章都是我对某个主题的深入思考和总结。

\`\`\`bash
echo "Hello, world!"
\`\`\`
markdown5. 启动 HTTP 服务器使用一个简单的 HTTP 服务器来启动你的项目。你可以使用 http-server 或 live-server。如果没有安装这些工具，可以使用以下命令安装：npm install -g http-server
sh或者npm install -g live-server
sh然后启动服务器：http-server
sh或者live-server
sh6. 访问 index.html打开浏览器，访问 index.html，确保文章内容能够正确加载，并且代码块被正确高亮。通过以上步骤，你应该能够确保文章内容能够正确加载，并且使用 marked 库的自定义选项进行渲染。如果有任何其他问题，请告诉我！内容由AI生成 记下来4分钟前16:08你提供的代码示例展示了如何使用 marked 库及其自定义选项来解析 Markdown 文本。由于你提到使用 require，这通常适用于 Node.js 环境。然而，在浏览器环境中，我们需要确保 marked 库已经通过 CDN 加载，并且可以直接在全局作用域中使用。1. 使用 marked 库的 UMD 版本我们将继续使用 unpkg 提供的 marked 库的 UMD 版本，并确保在浏览器环境中正确使用它。2. 更新 index.html确保 marked 库通过 CDN 加载，并且 script.js 在页面加载完成后执行。index.html<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>我的博客</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://chinese-fonts-cdn.deno.dev/packages/dymh/dist/DouyinSansBold/result.css">
    <script src="https://unpkg.com/marked@4.0.13/lib/marked.umd.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/default.min.css">
</head>
<body>
    <header>
        <div class="container">
            <h1>我的博客</h1>
            <nav>
                <a href="#/" onclick="showPosts()">首页</a>
                <a href="#/articles" onclick="showPosts()">文章</a>
                <a href="#/favorites" onclick="showFavorites()">收藏夹</a>
                <a href="#/contact" onclick="showContact()">联系我</a>
                <a href="#/videos" onclick="showVideos()">喜欢的视频</a>
            </nav>
        </div>
    </header>

    <div class="container">
        <div class="content" id="content">
            <section class="posts">
                <div class="post">
                    <h2><a href="#/article1" onclick="loadArticle('article1')">第一篇博客文章</a></h2>
                    <p>这是我的第一篇博客文章。在这里，我会分享一些有趣的内容和想法。</p>
                </div>
                <div class="post">
                    <h2><a href="#/article2" onclick="loadArticle('article2')">第二篇博客文章</a></h2>
                    <p>这是我的第二篇博客文章。在这篇文章中，我将继续分享更多的内容和见解。</p>
                </div>
                <div class="post">
                    <h2><a href="#/article3" onclick="loadArticle('article3')">第三篇博客文章</a></h2>
                    <p>这是我的第三篇博客文章。每一篇文章都是我对某个主题的深入思考和总结。</p>
                </div>
            </section>
        </div>
    </div>

    <footer>
        <p>版权所有 &copy; 2024 我的博客</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>
markup3. 更新 script.js在 script.js 中，配置 marked 库的自定义选项，并确保文章内容能够正确加载和渲染。script.js// 自定义选项
const options = {
  gfm: true, // 启用 GitHub Flavored Markdown
  pedantic: false, // 符合更严格的 Markdown 规范
  sanitize: true, // 清理输出的 HTML（防止 XSS 攻击）
  highlight: function(code, lang) {
    // 在这里可以添加代码高亮逻辑
    const validLanguage = hljs.getLanguage(lang) ? lang : 'plaintext';
    return hljs.highlight(validLanguage, code).value;
  }
};

// 读取文章内容
function loadArticle(articleName) {
    fetch(`articles/${articleName}.md`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(content => {
            // 提取文章标题
            const titleMatch = content.match(/^# (.+)/);
            const title = titleMatch ? titleMatch[1] : "未命名文章";

            // 将 Markdown 转换为 HTML
            const htmlContent = marked.parse(content, options);

            // 渲染文章内容
            document.getElementById('content').innerHTML = `
                <article>
                    <h1>${title}</h1>
                    <div class="article-content">
                        ${htmlContent}
                    </div>
                </article>
            `;

            // 初始化代码高亮
            document.querySelectorAll('pre code').forEach((block) => {
                hljs.highlightBlock(block);
            });
        })
        .catch(error => {
            console.error(`无法加载文章 ${articleName}:`, error);
            document.getElementById('content').innerHTML = `<p>无法加载文章 ${articleName}。</p>`;
        });
}

// 显示文章列表
function showPosts() {
    document.getElementById('content').innerHTML = `
        <section class="posts">
            <div class="post">
                <h2><a href="#/article1" onclick="loadArticle('article1')">第一篇博客文章</a></h2>
                <p>这是我的第一篇博客文章。在这里，我会分享一些有趣的内容和想法。</p>
            </div>
            <div class="post">
                <h2><a href="#/article2" onclick="loadArticle('article2')">第二篇博客文章</a></h2>
                <p>这是我的第二篇博客文章。在这篇文章中，我将继续分享更多的内容和见解。</p>
            </div>
            <div class="post">
                <h2><a href="#/article3" onclick="loadArticle('article3')">第三篇博客文章</a></h2>
                <p>这是我的第三篇博客文章。每一篇文章都是我对某个主题的深入思考和总结。</p>
            </div>
        </section>
    `;
}

// 显示收藏夹
function showFavorites() {
    document.getElementById('content').innerHTML = `
        <section class="favorites">
            <h2>我的收藏夹</h2>
            <div class="post">
                <h2><a href="#/favorite1">最喜欢的博客文章 1</a></h2>
                <p>这是我非常喜欢的一篇文章，内容非常丰富，值得一读。</p>
            </div>
            <div class="post">
                <h2><a href="#/favorite2">最喜欢的博客文章 2</a></h2>
                <p>这篇文章探讨了一个非常有趣的话题，提供了很多有价值的见解。</p>
            </div>
            <div class="post">
                <h2><a href="#/favorite3">最喜欢的博客文章 3</a></h2>
                <p>这篇文章对我影响很大，改变了我对某些问题的看法。</p>
            </div>
        </section>
    `;
}

// 显示联系方式
function showContact() {
    document.getElementById('content').innerHTML = `
        <section class="contact">
            <h2>联系我</h2>
            <a href="mailto:your-email@example.com">发邮件</a>
            <a href="https://twitter.com/your-twitter-handle">Twitter</a>
            <a href="https://github.com/your-github-username">GitHub</a>
        </section>
    `;
}

// 显示喜欢的视频
function showVideos() {
    document.getElementById('content').innerHTML = `
        <section class="videos">
            <h2>我喜欢的视频</h2>
            <div class="video">
                <a href="https://m.bilibili.com/video/BV1Re2wYHEPh?vd_source=181af9ae4f258abb2732cf48ed091135" target="_blank">ネバーランド feat. 初音ミク</a>
            </div>
            <div class="video">
                <a href="https://www.bilibili.com/video/BV234567890" target="_blank">视频 2 的描述</a>
            </div>
            <div class="video">
                <a href="https://www.bilibili.com/video/BV345678901" target="_blank">视频 3 的描述</a>
            </div>
        </section>
    `;
}

// 默认显示文章列表
window.onload = showPosts;
javascript4. 确保 articles 目录中的文件存在确保 articles 目录中有 article1.md、article2.md 和 article3.md 文件，并且内容格式正确。例如：articles/article1.md# 第一篇博客文章

这是我的第一篇博客文章。在这里，我会分享一些有趣的内容和想法。

\`\`\`javascript
console.log('Hello, world!');
\`\`\`
markdownarticles/article2.md# 第二篇博客文章

这是我的第二篇博客文章。在这篇文章中，我将继续分享更多的内容和见解。

\`\`\`python
def hello_world():
    print("Hello, world!")
\`\`\`
markdownarticles/article3.md# 第三篇博客文章

这是我的第三篇博客文章。每一篇文章都是我对某个主题的深入思考和总结。

\`\`\`bash
echo "Hello, world!"
\`\`\`
markdown5. 启动 HTTP 服务器使用一个简单的 HTTP 服务器来启动你的项目。你可以使用 http-server 或 live-server。如果没有安装这些工具，可以使用以下命令安装：npm install -g http-server
sh或者npm install -g live-server
sh然后启动服务器：http-server
sh或者live-server
sh6. 访问 index.html打开浏览器，访问 index.html，确保文章内容能够正确加载，并且代码块被正确高亮。通过以上步骤，你应该能够确保文章内容能够正确加载，并且使用 marked 库的自定义选项进行渲染。如果有任何其他问题，请告诉我！内容由AI生成 记下来
